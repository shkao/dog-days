 All you need to learn machine learning in 2024 is a laptop and a list of the steps you need to take. I'm a student researcher working for an ex-meta professor and have had interviews with Google DeepMind, Amazon and other cool companies, but it took me over three years to get to this point. So today I will share how I would learn machine learning if I could start over by revealing the six key steps you need to take. Let's get going. In general, all these steps don't have to be strictly completed in any particular order, but I would not start with the final and arguably most important step. That said, what I do highly recommend is to start with learning the basics of Python. Python is the programming language used by pretty much everyone to work on machine learning, and every other step on this list builds on top of it. This mainly applies to beginners that don't know what a list or a dictionary are, and that don't how to write a simple if-else statement or a for loop. I would even go as far as saying you need to learn what a list comprehension and what class inheritance are. And honestly, I don't know what else to say than just type in Python tutorial or course on YouTube or Google and get started. There's so much amazing free content out there, but you should always keep in mind to actively code along the tutorial. Enjoy getting into machine learning with Python, but don't go too in-depth. This lets you start with a fun experience, because at some point, you will also have to learn maths. Now, you could argue that you don't need maths, because so much is already automated and taken care of by cool Python libraries, which is true but you will need to know all the fundamentals of calculus linear algebra and probability theory to understand pretty much any machine learning approach That said you really don need complex maths Most of the maths is high school or entry level college maths. Like, you just need to understand what the derivative of a function is and how to compute it. You need to know what a matrix is and how the dot product works. There again are amazing resources out there that are free, like these courses right here, a website called Khan Academy. I mean, you can even learn most of what you need on Brilliant.org. Sadly not sponsored. Or you just go to college and take the mandatory maths classes for any engineering major. I'll tell you about my absolute favorite resource for learning the fundamental maths for neural networks after we cover the next important steps. This already shows you that you don't need to hustle through all the maths courses there are in the beginning. In fact, I wouldn't even recommend that because it can be very frustrating and just not fun. Whenever you don't understand some math later on, you can always revisit it by just googling. Learn the basics and then continue on to the next fun step, learning about the ML developer stack. So now you know the basics of Python and, if you haven't already, can learn some basic tools like Jupyter Notebooks and libraries like Pandas, NumPy and Matplotlib. NumPy is a library for doing math with matrices or arrays. It's a great starting point because you can now implement the math that you just learned about and see how simple it is to compute a dot product between two matrices. Matplotlib is a tool for visualizing data and graphs and just seeing what math you are doing and, in my opinion at least, visualizing stuff is fun and just very useful. Finally, pandas is a great tool for dealing with data that is in tabular format. A lot of machine learning problems deal with tabular data and pandas lets you again very easily manipulate those and visualize the tables All those libraries also work very well with Jupyter notebooks and are an essential part of learning machine learning. As you will see by getting to know those frameworks you will automatically improve your overall practical Python and ML skills. But again only focus on the basics by following a few tutorials. Later when working on projects you'll really get to the libraries. So now, let's get back to some theory and finally actually learn about machine learning and deep learning. Okay, up until now everything should honestly not take too long, perhaps a few weeks, depending on how much time you put in and at what level you already are. But the ML courses I will now recommend do take some time. The best and probably most famous machine learning course or collection of courses is the Machine Learning Specialization by Andrew Ng. The The cool thing is that you here already get to know some machine learning frameworks, like Scikit-learn and TensorFlow. Well, I do have to admit, I personally prefer and would recommend PyTorch, but learning one framework pretty much lets you already quickly adapt to the other one. This course is absolute gold, and it's free. Although this is the beginner course, it is still very important. They here teach a lot of classical ML concepts, and those are the things you need to be able to answer quite easily in ML interviews. Now, remember when I teased my favorite resource for learning maths in neural networks? Well, after learning about those in Andrew's course, I would watch Andrej Karpathy's Neural Networks series. He here implements a simple NLP model from the ground up and goes all the way up to a transform model. He also goes through all the maths of backpropagation and so on. I cannot recommend this series enough Since in Andrej Nung and Andrej Karpathy courses you already get some practical experience with the taught ML concepts I would then continue on to the next more advanced and practical course the Deep Learning Specialization This course focuses more on implementing and training neural nets, and the absolutely amazing thing here is that they also include Hugging Face, which is a library that you pretty much cannot avoid. It's really amazing. And if you feel like this course doesn't teach you enough about Hugging Face, you can also just go through the Hugging Face NLP course directly. There you also learn even more advanced concepts in NLP. Well, if you are interested in NLP, that is. So yeah, those are the two or perhaps even three courses I would take and recommend. By now you have learned a lot and worked on several smaller projects or rather tutorials. Now it's time to actually get your hands dirty and work on real projects. I honestly think you here learn the most and there are two things I would work on. First, I would go to Kaggle and just work on challenges. There are many available for any level. Try not to underestimate the complexity and start with simpler challenges so you don't get frustrated and demotivated. And if you do take on more difficult ones that also come with prize money, don't expect to win one. It's really difficult to get to that point and you also need a lot of compute. So okay, after working on Kaggle challenges comes my final and favorite type of project to work on. implementing a paper and recreating the results. This is challenging and you will learn a lot. And most importantly, this type of project will definitely help you stand out on your ML application. That said, there are a few other simpler ways to stand out that you can already get started during your learning process. So I'm sure you might want to watch this video right here where I reveal those techniques and tips. Bye bye!

Source URL: https://www.youtube.com/watch?v=gUmagAluXpk